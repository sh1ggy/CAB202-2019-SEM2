Adding one-bit binary numbers, with carry:
Decimal on left; binary digits on right.
 01               1
  53     0    1   01
+ 38    +0   +0  +01
 ---    --   --   --
  91     0    1   10


Powers of 2 (note: ^ is NOT the C "to-the-power-of" operator):
2^0  == 1
2^1  == 2
2^2  == 4
2^3  == 8

Multiplying powers of 2:
2^A * 2^B == 2^(A+B)

e.g.
A=5, B=3
2^A == 2x2x2x2x2
2^B == 2x2x2
2^A x 2^B == 2x2x2x2x2 x 2x2x2 == 2^8 == 2^(A+B)

In binary:
2^0  ==    1
2^1  ==   10
2^2  ==  100
2^3  == 1000


12 dec == 1x2^3 + 1x2^2 --> binary 1100
                            0b1100
							0b00001100
13  = 12 + 1 == 0b00001100
                0b00000001
				----------
			    0b00001101	

14 == 12 + 2 == 0b00001100
               +0b00000010
			   -----------
			 == 0b00001110

Add a number to itself:
             11
12+12   0b00001100
        0b00001100
		----------
		0b00011000

Complement operation:
x == 12 -> 0b00001100
~x         0b11110011
128+64+32+16+2+1

Negative numbers (two's complement):
-x == (~x)+1
x == 12  ->0b00001100
~x         0b11110011
~x+1       0b11110100

12 + (-12):
           11111
 12      0b00001100
-12      0b11110100
         ----------
         0b00000000

Bit mask example:
 uint8_t mask = (1 << 1) | (1 << 3) | (1 << 5); 
 mask  == 0b00101010
 !mask == 0b11010101
